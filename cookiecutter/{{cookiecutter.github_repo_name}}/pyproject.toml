# License: {{cookiecutter.license}}
# Copyright Â© {{copyright_year}} {{cookiecutter.author_name}}

[build-system]
requires = [
  "setuptools == 70.1.1",
  "setuptools_scm[toml] == 8.1.0",
  "frequenz-repo-config[{{cookiecutter.type}}] == 0.10.0",
{%- if cookiecutter.type == "api" %}
  # We need to pin the protobuf, grpcio and  grpcio-tools dependencies to make
  # sure the code is generated using the minimum supported versions, as older
  # versions can't work with code that was generated with newer versions.
  # https://protobuf.dev/support/cross-version-runtime-guarantee/#backwards
  "protobuf == 5.28.0",
  "grpcio-tools == 1.66.1",
  "grpcio == 1.66.1",
{%- endif %}
]
build-backend = "setuptools.build_meta"

[project]
name = "{{cookiecutter.pypi_package_name}}"
description = "{{cookiecutter.description}}"
readme = "README.md"
license = { text = "{{cookiecutter.license}}" }
keywords = {{cookiecutter | keywords}}
# TODO(cookiecutter): Remove and add more classifiers if appropriate
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  {%- if cookiecutter.license == "MIT" %}
  "License :: OSI Approved :: MIT License",
  {%- elif cookiecutter.license == "Propietary" %}
  "License :: Other/Proprietary License",
  {%- endif %}
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  {%- if cookiecutter.type != "app" %}
  "Topic :: Software Development :: Libraries",
  {%- endif %}
  "Typing :: Typed",
]
requires-python = ">= 3.11, < 4"
# TODO(cookiecutter): Remove and add more dependencies if appropriate
{%- if cookiecutter.type in ("app", "actor", "model") %}
dependencies = [
  "typing-extensions == 4.6.1",
  # Make sure to update the version for cross-referencing also in the
  # mkdocs.yml file when changing the version here (look for the config key
  # plugins.mkdocstrings.handlers.python.import)
  "frequenz-sdk >= 1.0.0rc901, < 1.0.0rc1000",
]
{%- elif cookiecutter.type == "api" %}
dependencies = [
  "frequenz-api-common >= 0.6.2, < 0.7.0",
  # We can't widen beyond the current value unless we bump the minimum
  # requirements too because of protobuf cross-version runtime guarantees:
  # https://protobuf.dev/support/cross-version-runtime-guarantee/#major
  "protobuf >= 5.28.0, < 7", # Do not widen beyond 7!
  # We couldn't find any document with a spec about the cross-version runtime
  # guarantee for grpcio, so unless we find one in the future, we'll assume
  # major version jumps are not compatible
  "grpcio >= 1.66.1, < 2", # Do not widen beyond 2!
]
{%- else %}
dependencies = [
  "typing-extensions >= 4.5.0, < 5",
]
{%- endif %}
dynamic = ["version"]

[[project.authors]]
name = "{{cookiecutter.author_name}}"
email = "{{cookiecutter.author_email}}"

# TODO(cookiecutter): Remove and add more optional dependencies if appropriate
[project.optional-dependencies]
dev-flake8 = [
  "flake8 == 7.1.0",
  "flake8-docstrings == 1.7.0",
  "flake8-pyproject == 1.2.3",  # For reading the flake8 config from pyproject.toml
  "pydoclint == 0.5.3",
  "pydocstyle == 6.3.0",
]
dev-formatting = ["black == 24.4.2", "isort == 5.13.2"]
dev-mkdocs = [
  "Markdown == 3.6.0",
  "black == 24.4.2",
  "mike == 2.1.2",
  "mkdocs-gen-files == 0.5.0",
  "mkdocs-literate-nav == 0.6.1",
  "mkdocs-macros-plugin == 1.0.5",
  "mkdocs-material == 9.5.27",
  "mkdocstrings[python] == 0.26.1",
  "mkdocstrings-python == 1.11.1",
  "frequenz-repo-config[{{cookiecutter.type}}] == 0.10.0",
]
dev-mypy = [
  "mypy == 1.9.0",
{%- if cookiecutter.type == "api" %}
  "grpc-stubs == 1.53.0.2",
{%- endif %}
  "types-Markdown == 3.6.0.20240316",
  # For checking the noxfile, docs/ script, and tests
  "{{cookiecutter.pypi_package_name}}[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-noxfile = [
  "nox == 2024.4.15",
  "frequenz-repo-config[{{cookiecutter.type}}] == 0.10.0",
]
dev-pylint = [
  # dev-pytest already defines a dependency to pylint because of the examples
  # For checking the noxfile, docs/ script, and tests
  "{{cookiecutter.pypi_package_name}}[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-pytest = [
  "pytest == 8.2.2",
  "pylint == 3.2.5",       # We need this to check for the examples
  "frequenz-repo-config[extra-lint-examples] == 0.10.0",
{%- if cookiecutter.type != "api" %}
  "pytest-mock == 3.14.0",
  "pytest-asyncio == 0.23.7",
  "async-solipsism == 0.6",
{%- endif %}
]
dev = [
  "{{cookiecutter.pypi_package_name}}[dev-mkdocs,dev-flake8,dev-formatting,dev-mkdocs,dev-mypy,dev-noxfile,dev-pylint,dev-pytest]",
]

[project.urls]
Documentation = "https://{{cookiecutter.github_org}}.github.io/{{cookiecutter.github_repo_name}}/"
Changelog = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}/releases"
Issues = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}/issues"
Repository = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}"
Support = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}/discussions/categories/support"

[tool.black]
line-length = 88
target-version = ['py311']
{%- if cookiecutter.type != "api" %}
include = '\.pyi?$'
{%- endif %}

[tool.isort]
profile = "black"
line_length = 88
{#- We don't include "py" here for API because we don't want to check generated files #}
src_paths = ["benchmarks", "examples", "src", "tests"]

[tool.flake8]
# We give some flexibility to go over 88, there are cases like long URLs or
# code in documenation that have extra indentation. Black will still take care
# of making everything that can be 88 wide, 88 wide.
max-line-length = 100
extend-ignore = [
  "E203", # Whitespace before ':' (conflicts with black)
  "W503", # Line break before binary operator (conflicts with black)
]
# pydoclint options
style = "google"
check-return-types = false
check-yield-types = false
arg-type-hints-in-docstring = false
arg-type-hints-in-signature = true
allow-init-docstring = true
check-class-attributes = false

[tool.pylint.similarities]
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 40

[tool.pylint.messages_control]
disable = [
  "too-few-public-methods",
  "too-many-return-statements",
  # disabled because it conflicts with isort
  "wrong-import-order",
  "ungrouped-imports",
  # pylint's unsubscriptable check is buggy and is not needed because
  # it is a type-check, for which we already have mypy.
  "unsubscriptable-object",
  # Checked by mypy
  "no-member",
  # Checked by flake8
  "f-string-without-interpolation",
  "line-too-long",
  "missing-function-docstring",
  "redefined-outer-name",
  "unnecessary-lambda-assignment",
  "unused-import",
  "unused-variable",
]

[tool.pytest.ini_options]
{%- if cookiecutter.type != "api" %}
testpaths = ["tests", "src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
required_plugins = ["pytest-asyncio", "pytest-mock"]
{%- else %}
testpaths = ["pytests"]
{%- endif %}

[tool.mypy]
explicit_package_bases = true
namespace_packages = true
# This option disables mypy cache, and it is sometimes useful to enable it if
# you are getting weird intermittent error, or error in the CI but not locally
# (or vice versa). In particular errors saying that type: ignore is not
# used but getting the original ignored error when removing the type: ignore.
# See for example: https://github.com/python/mypy/issues/2960
#no_incremental = true
packages = ["{{cookiecutter.python_package}}"]
strict = true

[[tool.mypy.overrides]]
module = ["mkdocs_macros.*", "sybil", "sybil.*"]
ignore_missing_imports = true
{%- if cookiecutter.type == "api" %}

[tool.setuptools.package-dir]
"" = "py"

[tool.setuptools.package-data]
"*" = ["*.pyi"]
{%- endif %}

[tool.setuptools_scm]
version_scheme = "post-release"
